using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;
using MySql.Data;

namespace gruppeKinit
{
    class gruppeKinit
    {
        static void Main(string[] args)
        {
            // Meine selbst erstellte SQL-Logik
            string dbErstellungMeineVersion =
            @"

            DROP DATABASE IF EXISTS `gruppeK`;
            CREATE DATABASE `gruppeK` DEFAULT CHARACTER SET utf8;


            CREATE TABLE IF NOT EXISTS `DailyNotes` 
            (
                `idDailyNote`       INT             NOT NULL AUTO_INCREMENT,
                `noteContent`       VARCHAR(255)    DEFAULT NULL,
                `idDiaryEntry`      INT             DEFAULT NULL,
                PRIMARY KEY (`idDailyNote`),
                FOREIGN KEY (`idDiaryEntry`) REFERENCES diaryEntries (`idDiaryEntry`)
            )
            ENGINE = InnoDB;


            CREATE TABLE IF NOT EXISTS `DiaryEntries` 
            (
                `idDiaryEntry`      INT             NOT NULL AUTO_INCREMENT,
                `idUser`            INT             NULL,
                PRIMARY KEY (`idDiaryEntry`),
                FOREIGN KEY (`idUser`) REFERENCES `Users` (`idUser`)
            )
            ENGINE = InnoDB;


            CREATE TABLE IF NOT EXISTS `Moods` 
            (
                `idMood`            INT             NOT NULL AUTO_INCREMENT,
                `moodType`          TINYINT(10)     NULL,
                `idDiaryEntry`      INT             NULL,
                PRIMARY KEY (`idMood`),
                FOREIGN KEY (`idDiaryEntry`) REFERENCES `DiaryEntries` (`idDiaryEntry`)
            )
            ENGINE = InnoDB;


            CREATE TABLE IF NOT EXISTS `TodoItems` 
            (
                `idTodoItem`        INT             NOT NULL AUTO_INCREMENT,
                `todoItemContent`   VARCHAR(100)    NULL,
                `doneOrNot`         BIT(2)          NULL,
                `idDiaryEntry`      INT             NULL,
                PRIMARY KEY (`idTodoItem`),
                FOREIGN KEY (`idDiaryEntry`) REFERENCES `DiaryEntries` (`idDiaryEntry`)
            )
            ENGINE = InnoDB;


            CREATE TABLE IF NOT EXISTS `Users` 
            (
                `idUser`            INT             NOT NULL AUTO_INCREMENT,
                `vorname`           VARCHAR(45)     NULL,
                `nachname`          VARCHAR(45)     NULL,
                `username`          VARCHAR(45)     NULL,
                PRIMARY KEY (`idUser`)
            )
            ENGINE = InnoDB;"
            ;

            // Aus MySQL Workbench kopierte SQL-Logik
            string dbErstellungForwardEngineeringVersion =
            @"

            -- MySQL Script generated by MySQL Workbench
            -- Wed Mar 23 17:44:32 2022
            -- Model: New Model    Version: 1.0
            -- MySQL Workbench Forward Engineering

            SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
            SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
            SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

            -- -----------------------------------------------------
            -- Schema gruppeK
            -- -----------------------------------------------------

            -- -----------------------------------------------------
            -- Schema gruppeK
            -- -----------------------------------------------------
            CREATE SCHEMA IF NOT EXISTS `gruppeK` DEFAULT CHARACTER SET utf8 ;
            USE `gruppeK` ;

            -- -----------------------------------------------------
            -- Table `gruppeK`.`DailyNotes`
            -- -----------------------------------------------------
            DROP TABLE IF EXISTS `gruppeK`.`DailyNotes` ;

            CREATE TABLE IF NOT EXISTS `gruppeK`.`DailyNotes` 
            (
                `idDailyNote`       INT             NOT NULL,
                `noteContent`       VARCHAR(255)    NULL,
                `idDiaryEntry`      INT             NULL,
                PRIMARY KEY (`idDailyNote`),
                INDEX `idDiaryEntry_idx` (`idDiaryEntry` ASC) VISIBLE,
                CONSTRAINT `idDiaryEntry` FOREIGN KEY (`idDiaryEntry`) REFERENCES `gruppeK`.`DiaryEntries` (`idDiaryEntry`) ON DELETE NO ACTION ON UPDATE NO ACTION
            )
            ENGINE = InnoDB;


            -- -----------------------------------------------------
            -- Table `gruppeK`.`DiaryEntries`
            -- -----------------------------------------------------
            DROP TABLE IF EXISTS `gruppeK`.`DiaryEntries` ;

            CREATE TABLE IF NOT EXISTS `gruppeK`.`DiaryEntries` 
            (
                `idDiaryEntry`      INT             NOT NULL,
                `idUser`            INT             NULL,
                PRIMARY KEY (`idDiaryEntry`),
                INDEX `idUsers_idx` (`idUser` ASC) VISIBLE,
                CONSTRAINT `idUser` FOREIGN KEY (`idUser`) REFERENCES `gruppeK`.`Users` (`idUser`) ON DELETE NO ACTION ON UPDATE NO ACTION
            )
            ENGINE = InnoDB;


            -- -----------------------------------------------------
            -- Table `gruppeK`.`Moods`
            -- -----------------------------------------------------
            DROP TABLE IF EXISTS `gruppeK`.`Moods` ;

            CREATE TABLE IF NOT EXISTS `gruppeK`.`Moods` 
            (
                `idMood`            INT             NOT NULL,
                `moodType`          TINYINT(10)     NULL,
                `idDiaryEntry`      INT             NULL,
                PRIMARY KEY (`idMood`),
                INDEX `idDiaryEntry_idx` (`idDiaryEntry` ASC) VISIBLE,
                CONSTRAINT `idDiaryEntry` FOREIGN KEY (`idDiaryEntry`) REFERENCES `gruppeK`.`DiaryEntries` (`idDiaryEntry`) ON DELETE NO ACTION ON UPDATE NO ACTION
            )
            ENGINE = InnoDB;


            -- -----------------------------------------------------
            -- Table `gruppeK`.`TodoItems`
            -- -----------------------------------------------------
            DROP TABLE IF EXISTS `gruppeK`.`TodoItems` ;

            CREATE TABLE IF NOT EXISTS `gruppeK`.`TodoItems` 
            (
                `idTodoItem`        INT             NOT NULL,
                `todoItemContent`   VARCHAR(100)    NULL,
                `doneOrNot`         BIT(2)          NULL,
                `idDiaryEntry`      INT             NULL,
                PRIMARY KEY (`idTodoItem`),
                INDEX `idDiaryEntry_idx` (`idDiaryEntry` ASC) VISIBLE,
                CONSTRAINT `idDiaryEntry` FOREIGN KEY (`idDiaryEntry`) REFERENCES `gruppeK`.`DiaryEntries` (`idDiaryEntry`) ON DELETE NO ACTION ON UPDATE NO ACTION
            )
            ENGINE = InnoDB;


            -- -----------------------------------------------------
            -- Table `gruppeK`.`Users`
            -- -----------------------------------------------------
            DROP TABLE IF EXISTS `gruppeK`.`Users` ;

            CREATE TABLE IF NOT EXISTS `gruppeK`.`Users` 
            (
                `idUser`            INT             NOT NULL,
                `vorname`           VARCHAR(45)     NULL,
                `nachname`          VARCHAR(45)     NULL,
                `username`          VARCHAR(45)     NULL,
                PRIMARY KEY (`idUser`)
            )
            ENGINE = InnoDB;

            SET SQL_MODE = '';
            DROP USER IF EXISTS gruppeKadmin;
            SET SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
            CREATE USER 'gruppeKadmin' IDENTIFIED BY 'passwort';

            GRANT ALL ON `gruppeK`.* TO 'gruppeKadmin';
            GRANT SELECT ON TABLE `gruppeK`.* TO 'gruppeKadmin';
            GRANT SELECT, INSERT, TRIGGER ON TABLE `gruppeK`.* TO 'gruppeKadmin';
            GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE `gruppeK`.* TO 'gruppeKadmin';
            GRANT EXECUTE ON ROUTINE `gruppeK`.* TO 'gruppeKadmin';

            SET SQL_MODE=@OLD_SQL_MODE;
            SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
            SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;"
            ;

            MySqlDBEinrichtungKlasse test1 = new MySqlDBEinrichtungKlasse();

            test1.OpenConnection();

            // hier mehr - sql sums an datenbank schicken

            test1.CloseConnection();

            Console.WriteLine("Juhuuuu!");
        }
    }
}
